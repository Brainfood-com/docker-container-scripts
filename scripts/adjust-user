#!/bin/bash

# This script will look at the MAP_USER specified in the environment,
# and adjust the target USER/GROUP to match.  This is meant to be used
# inside a container, when a volume mount is in use, and is shared with
# the HOST or other systems.

set -e

TARGET_USER="$1"
TARGET_GROUP="$2"
shift 2

declare -A target_user target_group map_user

error() {
	echo "$@" 1>&2
	exit 1
}

parse_target() {
	if ! [[ $(getent group "$TARGET_GROUP") =~ ^([^:]+):([^:]*):([^:]*):(.*)$ ]]; then
		if [[ ${map_user[gid]} ]]; then
			if ! [[ $(getent group "${map_user[gid]}") =~ ^([^:]+):([^:]*):([^:]*):(.*)$ ]]; then
				addgroup --quiet --gid ${map_user[gid]} "$TARGET_GROUP"
				[[ $(getent group "$TARGET_GROUP") =~ ^([^:]+):([^:]*):([^:]*):(.*)$ ]] || error "Couldn't parse after add: getent group"
			fi
		else
			error "Couldn't parse: getent group"
		fi
	fi
	target_group=(
		[name]="${BASH_REMATCH[1]}"
		[password]="${BASH_REMATCH[2]}"
		[id]="${BASH_REMATCH[3]}"
		[users]="${BASH_REMATCH[4]}"
	)
	TARGET_GROUP="${target_group[name]}"
	if ! [[ $(getent passwd "$TARGET_USER") =~ ^([^:]+):([^:]*):([^:]*):([^:]*):([^:]*):([^:]*):(.*)$ ]]; then
		if [[ ${map_user[uid]} ]]; then
			if ! [[ $(getent passwd "${map_user[uid]}") =~ ^([^:]+):([^:]*):([^:]*):([^:]*):([^:]*):([^:]*):(.*)$ ]]; then
				adduser --quiet --uid ${map_user[uid]} --ingroup "$TARGET_GROUP" --gecos '' --disabled-password "$TARGET_USER"
				[[ $(getent passwd "$TARGET_USER") =~ ^([^:]+):([^:]*):([^:]*):([^:]*):([^:]*):([^:]*):(.*)$ ]] || error "Couldn't parse after add: getent passwd"
			fi
		else
			error "Couldn't parse: getent passwd"
		fi
	fi
	target_user=(
		[name]="${BASH_REMATCH[1]}"
		[password]="${BASH_REMATCH[2]}"
		[uid]="${BASH_REMATCH[3]}"
		[gid]="${BASH_REMATCH[4]}"
		[gecos]="${BASH_REMATCH[5]}"
		[home]="${BASH_REMATCH[6]}"
		[shell]="${BASH_REMATCH[7]}"
	)
	TARGET_USER="${target_user[name]}"
}

parse_map() {
	if [[ $MAP_USER =~ ^"uid="([0-9]+)"("(.*)") gid="([0-9]+)"("(.*)") groups="(.*)$ ]]; then
		map_user=(
			[uid]=${BASH_REMATCH[1]}
			[user]="${BASH_REMATCH[2]}"
			[gid]=${BASH_REMATCH[3]}
			[group]="${BASH_REMATCH[4]}"
		)
	fi
}
if [[ -z ${TARGET_USER#*-} || -z ${TARGET_GROUP#*-} ]]; then
	parse_map
	[[ ${map_user[user]} && ${map_user[group]} ]] || error "Must pass a valid MAP_USER"
	[[ -z ${TARGET_USER#*-} ]] && TARGET_USER="$TARGET_USER${map_user[user]}"
	[[ -z ${TARGET_GROUP#*-} ]] && TARGET_GROUP="$TARGET_GROUP${map_user[group]}"
	parse_target
else
	parse_target
	parse_map
fi

if [[ ${map_user[gid]} && ${map_user[gid]} -ne 0 ]]; then
	[[ ${target_group[id]} -ne ${map_user[gid]} ]] && groupmod -g ${map_user[gid]} "$TARGET_GROUP"
fi
if [[ ${map_user[uid]} && ${map_user[uid]} -ne 0 ]]; then
	[[ ${target_user[uid]} -ne ${map_user[uid]} ]] && usermod -u ${map_user[uid]} "$TARGET_USER"
fi

declare -a target_dirs
[[ -d ${target_user[home]} ]] && target_dirs+=("${target_user[home]}")
target_dirs+=("$@")

if [[ ${#target_dirs[*]} -gt 0 ]]; then
	find "${target_dirs[@]}" \
		'(' -not -user "$TARGET_USER" -a -not -group "$TARGET_GROUP" -exec chown "$TARGET_USER:$TARGET_GROUP" '{}' + ')' -o \
		'(' -not -user "$TARGET_USER" -exec chown "$TARGET_USER" '{}' + ')' -o \
		'(' -not -group "$TARGET_GROUP" -exec chgrp "$TARGET_GROUP" '{}' + ')' -o \
		-true
fi
